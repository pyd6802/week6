podTemplate(yaml: '''
    apiVersion: v1
    kind: Pod
    spec:
      containers:
      - name: gradle
        image: gradle:6.3-jdk14
        command:
        - sleep
        args:
        - 99d
        volumeMounts:
        - name: shared-storage
          mountPath: /mnt
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - sleep
        args:
        - 9999999
        volumeMounts:
        - name: shared-storage
          mountPath: /mnt
        - name: kaniko-secret
          mountPath: /kaniko/.docker
      restartPolicy: Never
      volumes:
      - name: shared-storage
        persistentVolumeClaim:
          claimName: jenkins-pv-claim
      - name: kaniko-secret
        secret:
            secretName: dockercred
            items:
            - key: .dockerconfigjson
              path: config.json
    ''') {
      node(POD_LABEL) {
        script {
          env.TEST_PASSED = "true"
        }
        echo "TEST_PASSED: ${env.TEST_PASSED} - Startup Variable Check"
        stage('Pull gradle project from GitHub') {
            git 'https://github.com/pyd6802/week6.git'
        container('gradle') {
            stage('Build a gradle project') {
               sh '''
               cd Chapter08/sample1
               chmod +x gradlew
               ./gradlew build
               mv ./build/libs/calculator-0.0.1-SNAPSHOT.jar /mnt
            '''
                }
            stage('Test gradle project') {
               echo "I am the ${env.BRANCH_NAME} branch, I am compiled here"
               sh '''
               cd Chapter08/sample1
               chmod +x gradlew
               ./gradlew test
            '''
               }
            stage('Code coverage') {
               echo "My CC branch is: ${env.BRANCH_NAME}"
               if(env.BRANCH_NAME == "master") {
                   echo "I am the ${env.BRANCH_NAME} branch, code coverage runs here"
                   try {
                       sh '''
                       pwd
                       cd Chapter08/sample1
                       ./gradlew jacocoTestCoverageVerification
                       ./gradlew jacocoTestReport
                       '''
                       } catch(e) {
                           echo "${env.BRANCH_NAME} Code Coverage Failed"
                           script {env.TEST_PASSED = "false"}
                       }
                   publishHTML (target: [
                   reportDir: 'Chapter08/sample1/build/reports/jacoco/test/html',
                   reportFiles: 'index.html',
                   reportName: "JaCoCo Report"
                   ])
               }
               else {
                    echo "I am the ${env.BRANCH_NAME} branch, Code Coverage not applicable"
                    }
               }
            stage('Check style') {
               echo "My CS branch is: ${env.BRANCH_NAME}"
               if(env.BRANCH_NAME != "playground") {
                   echo "I am the ${env.BRANCH_NAME} branch, checkstyle runs here"
                   try { 
                       sh '''
                       pwd
                       cd Chapter08/sample1
                       ./gradlew checkstyleMain 
                   '''
                   } catch(e) {
                       echo "${env.BRANCH_NAME} Checkstyle Failed"
                       script {env.TEST_PASSED = "false"}
                   } 
                   publishHTML (target: [
                   reportDir: 'Chapter08/sample1/build/reports/checkstyle',
                   reportFiles: 'main.html',
                   reportName: "Checkstyle Report"
                   ])                       
               }
                else {
                    echo "I am the ${env.BRANCH_NAME} branch, Check Style not applicable"
                    }
               }
            }
        }
        stage('Build Java Image') {
        container('kaniko') {
            echo "Tests Passed Check is: ${env.TEST_PASSED}"  
            if (env.TEST_PASSED == "true") {
            echo 'All applicable tests passed, container will be created'
              stage('Create Dockerfile') {
              echo "My CS branch is: ${env.BRANCH_NAME}"
                if(env.BRANCH_NAME == "master") {
                echo "I am the ${env.BRANCH_NAME} branch, this is Docker Container version 1.0"
                  sh '''
                      echo 'FROM openjdk:8-jre' > Dockerfile
                      echo 'COPY ./calculator-0.0.1-SNAPSHOT.jar app.jar' >> Dockerfile
                      echo 'ENTRYPOINT ["java", "-jar", "app.jar"]' >> Dockerfile
                      mv /mnt/calculator-0.0.1-SNAPSHOT.jar .
                      /kaniko/executor --context `pwd` --destination pyd6802/calculator:1.0
                      '''
                  }
                else {
                    if(env.BRANCH_NAME == "feature") { 
                    echo "I am the ${env.BRANCH_NAME} branch, This is Docker Container version 0.1"
                      sh '''
                          echo 'FROM openjdk:8-jre' > Dockerfile
                          echo 'COPY ./calculator-0.0.1-SNAPSHOT.jar app.jar' >> Dockerfile
                          echo 'ENTRYPOINT ["java", "-jar", "app.jar"]' >> Dockerfile
                          mv /mnt/calculator-0.0.1-SNAPSHOT.jar .
                          /kaniko/executor --context `pwd` --destination pyd6802/calculator-feature:0.1
                        '''
                     }
                     else {
                       echo "I am the ${env.BRANCH_NAME} branch, Containter not applicable"
                     }
                  }
                }
              }
            else {
                echo "${env.BRANCH_NAME} branch container build aborted due to test fail"
                echo "Test Passed = ${env.TEST_PASSED}"
                script {currentBuild.rawBuild.@result = hudson.model.Result.SUCCESS}
              }
            
            }

        }
    } 
}
